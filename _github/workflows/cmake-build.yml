# ==============================================================================
# üî® CMake Build - Moderately Reusable Workflow
# ==============================================================================
# 
# Purpose: Complete CMake-based build workflow with flexible configuration
# 
# Features:
# ‚Ä¢ Support for CMake presets or traditional build types
# ‚Ä¢ Flexible compiler configuration (works with setup-env.yml)
# ‚Ä¢ Comprehensive caching (vcpkg, ccache, build directories)
# ‚Ä¢ Optional ccache statistics reporting
# ‚Ä¢ Robust error handling with artifact uploads
# ‚Ä¢ Parallel build support with configurable arguments
# 
# Reusability Level: üî® MODERATELY REUSABLE
# - Works with any CMake-based C++ project
# - Supports modern CMake practices (presets, targets, etc.)
# - Can be used across different repositories using CMake
# - Compatible with vcpkg, Conan, or other package managers
# - Used by build-test.yml and release-tag.yml in this repository
# 
# Usage Examples:
# 
# Basic CMake build:
#   uses: ./.github/workflows/cmake-build.yml
#   with:
#     buildType: release
# 
# Advanced with presets:
#   uses: ./.github/workflows/cmake-build.yml
#   with:
#     cmake-preset: "release-clang"
#     build-preset: "release-clang"
#     compiler: clang
# 
# Custom configuration:
#   uses: your-org/repo/.github/workflows/cmake-build.yml@main
#   with:
#     cmake-args: "-DENABLE_TESTING=ON -DENABLE_BENCHMARKS=ON"
#     build-args: "--parallel 4 --verbose"
#     enable-ccache-stats: true
# 
# Cross-project usage:
#   uses: ridgetradinggroup/template-lib/.github/workflows/cmake-build.yml@main
#   with:
#     buildType: debug
#     cmake-args: "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
# ==============================================================================

name: üî® CMake Build

on:
  workflow_call:
    inputs:
      compiler:
        description: 'Compiler to use (gcc or clang)'
        required: false
        type: string
        default: 'gcc'
      buildType:
        description: 'CMake build type (debug or release)'
        required: false
        type: string
        default: 'debug'
      cmake-preset:
        description: 'CMake configure preset to use (overrides buildType if set)'
        required: false
        type: string
        default: ''
      build-preset:
        description: 'CMake build preset to use (overrides buildType if set)'
        required: false
        type: string
        default: ''
      cmake-args:
        description: 'Additional CMake configure arguments'
        required: false
        type: string
        default: ''
      build-args:
        description: 'Additional build arguments (e.g., --parallel)'
        required: false
        type: string
        default: '--parallel'
      enable-ccache-stats:
        description: 'Show ccache statistics after build'
        required: false
        type: boolean
        default: true
      enable-testing:
        description: 'Enable BUILD_TESTING and vcpkg test features'
        required: false
        type: boolean
        default: true
      
jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    
    steps:
      # Checkout source code with full history for comprehensive build operations
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history needed for version extraction and git operations

      # Configure compiler environment based on input parameter
      # Supports both GCC and Clang with version-specific compiler paths
      - name: Setup Environment
        run: |
          # ==============================================================================
          # Setup Compiler Environment
          # ==============================================================================
          # Configure compiler toolchain based on input parameter
          if [[ "${{ inputs.compiler }}" == "clang" ]]; then
            echo "Setting up Clang 15 compiler toolchain"
            echo "CC=clang-15" >> $GITHUB_ENV
            echo "CXX=clang++-15" >> $GITHUB_ENV
          else
            echo "Setting up GCC 12 compiler toolchain"
            echo "CC=gcc-12" >> $GITHUB_ENV
            echo "CXX=g++-12" >> $GITHUB_ENV
          fi
          # Enable ccache for faster compilation by adding to PATH
          echo "/usr/lib/ccache" >> $GITHUB_PATH

      # Install essential build tools and compiler toolchain
      # Uses apt package manager with timeout protection
      - name: Install Build Tools
        timeout-minutes: 5
        run: |
          # ==============================================================================
          # Install Essential Build Tools and Compilers
          # ==============================================================================
          # Install core build tools required for CMake operations
          echo "Installing essential build tools and compiler toolchain"
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc-12 g++-12 ccache

      # Cache vcpkg packages to speed up dependency installation
      # Uses content-based cache keys for vcpkg manifest files
      - name: Cache vcpkg Packages
        if: hashFiles('vcpkg.json') != ''
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/vcpkg/installed
            ${{ runner.temp }}/vcpkg/buildtrees
          key: vcpkg-${{ inputs.compiler }}-${{ inputs.buildType }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}
          restore-keys: |
            vcpkg-${{ inputs.compiler }}-${{ inputs.buildType }}-
            vcpkg-${{ inputs.compiler }}-
            vcpkg-
      
      # Ensure ccache directory exists before caching
      # Prevents cache warnings about non-existent paths
      - name: Create ccache Directory
        run: |
          mkdir -p ~/.ccache
          echo "üìÅ ccache directory created: ~/.ccache"

      # Cache ccache data for faster incremental compilation
      # Uses branch-based cache keys for optimal cache hit rates across PRs
      - name: Cache ccache (Compiler Cache)
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ inputs.compiler }}-${{ inputs.buildType }}-${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}-${{ hashFiles('CMakePresets.json') }}
          restore-keys: |
            ccache-${{ inputs.compiler }}-${{ inputs.buildType }}-${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}-
            ccache-${{ inputs.compiler }}-${{ inputs.buildType }}-
            ccache-${{ inputs.compiler }}-
      
      # Cache CMake build directory for faster subsequent builds
      # Essential for preserving build artifacts between jobs
      - name: Cache Build Directory
        uses: actions/cache@v4
        with:
          path: build
          key: build-${{ inputs.compiler }}-${{ inputs.buildType }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            build-${{ inputs.compiler }}-${{ inputs.buildType }}-${{ github.sha }}-
            build-${{ inputs.compiler }}-${{ inputs.buildType }}-
            build-${{ inputs.compiler }}-

      # Setup vcpkg package manager for dependency management
      # Uses custom composite action for reliable vcpkg installation
      - name: Setup vcpkg (Package Manager)
        timeout-minutes: 15
        uses: ./.github/actions/setup-vcpkg
        with:
          vcpkgDirectory: ${{ runner.temp }}/vcpkg

      # Reset ccache statistics to measure per-build performance
      # Only runs when ccache statistics reporting is enabled
      - name: Reset ccache Statistics
        if: inputs.enable-ccache-stats == true
        run: |
          # ==============================================================================
          # Reset ccache Statistics for Meaningful Per-Build Metrics
          # ==============================================================================
          echo "Resetting ccache statistics for accurate per-build measurements"
          ccache --zero-stats

      # Configure CMake project with support for presets or traditional builds
      # Handles both modern CMake presets and traditional build type approaches
      - name: Configure CMake
        run: |
          # ==============================================================================
          # Configure CMake Project (Presets vs. Traditional)
          # ==============================================================================
          # Determine configuration approach based on input parameters
          if [[ -n "${{ inputs.cmake-preset }}" ]]; then
            echo "Using CMake configure preset: ${{ inputs.cmake-preset }}"
            CMAKE_CONFIGURE_CMD="cmake --preset ${{ inputs.cmake-preset }}"
          else
            echo "Using traditional CMake build type: ${{ inputs.buildType }}"
            CMAKE_CONFIGURE_CMD="cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ inputs.buildType }}"
          fi
          
          # Append additional CMake arguments if provided by user
          if [[ -n "${{ inputs.cmake-args }}" ]]; then
            CMAKE_CONFIGURE_CMD="$CMAKE_CONFIGURE_CMD ${{ inputs.cmake-args }}"
          fi
          
          # Conditionally enable testing based on input parameter
          if [ "${{ inputs.enable-testing }}" == "true" ]; then
            CMAKE_CONFIGURE_CMD="$CMAKE_CONFIGURE_CMD -DBUILD_TESTING=ON -DVCPKG_MANIFEST_FEATURES=test"
            echo "üß™ Testing enabled: BUILD_TESTING=ON, VCPKG_MANIFEST_FEATURES=test"
          else
            CMAKE_CONFIGURE_CMD="$CMAKE_CONFIGURE_CMD -DBUILD_TESTING=OFF"
            echo "‚ö° Testing disabled: BUILD_TESTING=OFF"
          fi
          
          echo "üîß Executing CMake configuration: $CMAKE_CONFIGURE_CMD"
          eval $CMAKE_CONFIGURE_CMD

      # Build the configured CMake project with appropriate build command
      # Supports both preset-based and traditional build approaches
      - name: Build Project
        run: |
          # ==============================================================================
          # Build CMake Project (Presets vs. Traditional)
          # ==============================================================================
          # Determine build approach based on configuration method used
          if [[ -n "${{ inputs.build-preset }}" ]]; then
            echo "Using explicit CMake build preset: ${{ inputs.build-preset }}"
            BUILD_CMD="cmake --build --preset ${{ inputs.build-preset }}"
          elif [[ -n "${{ inputs.cmake-preset }}" ]]; then
            echo "Using CMake build preset matching configure preset"
            BUILD_CMD="cmake --build --preset ${{ inputs.cmake-preset }}"
          else
            echo "Using traditional CMake build directory approach"
            BUILD_CMD="cmake --build build"
          fi
          
          # Append build arguments for parallelism and verbosity control
          if [[ -n "${{ inputs.build-args }}" ]]; then
            BUILD_CMD="$BUILD_CMD ${{ inputs.build-args }}"
          fi
          
          echo "üî® Executing CMake build: $BUILD_CMD"
          eval $BUILD_CMD

      # Display ccache performance statistics for build optimization insights
      # Only runs when statistics reporting is enabled via input parameter
      - name: Show ccache Statistics
        if: inputs.enable-ccache-stats == true
        run: |
          # ==============================================================================
          # Display ccache Performance Statistics
          # ==============================================================================
          echo "üéØ ccache Statistics After Build:"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          ccache --show-stats
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

      # Verify build artifacts before upload
      # Ensures we're uploading valid build results to downstream jobs
      - name: Verify Build Artifacts Before Upload
        run: |
          # ==============================================================================
          # Verify Build Directory Contents Before Artifact Upload
          # ==============================================================================
          echo "üîç Verifying build artifacts before upload..."
          
          # Check for build directories (presets may create subdirectories)
          BUILD_DIR=""
          if [[ -d "build/${{ inputs.buildType }}" ]]; then
            BUILD_DIR="build/${{ inputs.buildType }}"
            echo "üìÅ Using preset-specific build directory: $BUILD_DIR"
          elif [[ -d "build" ]]; then
            BUILD_DIR="build"
            echo "üìÅ Using standard build directory: $BUILD_DIR"
          else
            echo "‚ùå No build directory found - build process may have failed"
            echo "   Expected: build/ or build/${{ inputs.buildType }}/"
            ls -la . || true
            exit 1
          fi
          
          # Verify CMakeCache.txt exists in the build directory
          if [[ ! -f "$BUILD_DIR/CMakeCache.txt" ]]; then
            echo "‚ùå CMakeCache.txt not found in $BUILD_DIR - CMake configuration may have failed"
            echo "   Build directory contents:"
            ls -la "$BUILD_DIR/" || true
            exit 1
          fi
          
          echo "‚úÖ Build artifacts verified - ready for upload"
          echo "üìÅ Build directory: $BUILD_DIR ($(du -sh $BUILD_DIR | cut -f1))"
          echo "üìÑ Key files present:"
          ls -la "$BUILD_DIR/CMakeCache.txt" "$BUILD_DIR/compile_commands.json" 2>/dev/null || true

      # Upload build directory as artifact for downstream jobs (tests)
      # Ensures build artifacts are available even if cache fails
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ inputs.buildType }}-${{ inputs.compiler }}
          path: build/
          retention-days: 1  # Short retention since this is only for workflow inter-job communication
          if-no-files-found: error  # Fail if no build artifacts to upload

      # Upload CMake build logs for debugging build failures
      # Only uploads on failure to conserve artifact storage space
      - name: Upload Build Logs (on failure)
        if: failure()
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: cmake-build-logs-${{ inputs.buildType }}-${{ inputs.compiler }}
          path: |
            build/**/CMakeFiles/CMakeOutput.log
            build/**/CMakeFiles/CMakeError.log
          if-no-files-found: warn